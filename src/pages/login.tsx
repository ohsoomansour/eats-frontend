/*#️⃣15.4 Form Design
  1.flex container 
   🔹justify(행의 끝을 나란히 맞추다): 메인축 좌/우
    > justify-content: center;
   🔹align(일직선으로 하다, 나란히 만들다): 메인축 위/아래
    > align-items: center;
  #️⃣15.5 Form Login
    1. 📄https://tailwindcss.com/docs/ring-width & https://tailwindcss.com/docs/ring-offset-width
      🔹focus:outline-none 하는 이유는 디폴트 값으로 블랙으로 처리 됨 따라서 처리 해주고 
      🔹focus:ring-2 focus:ring-pink-500 focus:ring-opacity-900 
   
    2. useForm이 name을 찾는데 
       - 형식1: <input name="email" />
       - 형식2: {...register("email", )}

    3. 🔹form태그(블록) 안에서: input, button이 인라인 태그라도 블록으로 쌓임❗
       
  #️⃣15.6 Login Mutation part one 
   🚨mutation PotatoMutation($email:String!, $password: String!) > 프론트엔드에서만 사용!❗
    1.const LOGIN_MUTATION = gql`
      mutation PotatoMutation($email:String!, $password: String!) {  
      🔷backend 하듯이 적어줘야 함, playground 기입방식 
        login(input:{
          email:$email,
          password: $password
        })
      }
    `
    🔹$email: $표시는 '변수'라는 뜻 > Apollo가 변수로 이해 한다 
    2. const [loginMutation, {loading, error, data}] = useMutation(LOGIN_MUTATION)
     🔹useForm 훅의 1번째 인수:이 function은 mutation의 방아쇠 역할이다  역할은 mutation function이다
     🔹useForm 훅의 2번째 인수: mutatio으로 부터 되돌아 오는 'data'
        🔯loading: mutation이 실행중이다
        🔯error: mutation이 error를 반환
        🔯data: 출처는 --- 백엔드, DTO 아웃풋에서 온다
    3. logingMutation({
        variables: {
          email,
          password:28423  🔴에러발생: mutation에 type을 이용하지 않았을 경우 
        }
       }) 
    ✅email:"ceoosm@gmail.com",
      password:"284823",
      role:Client
      "x-jwt":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiaWF0IjoxNjY1NDA0MzQyfQ.8iibfq5HS2aVxyAoiJQsu-Is8keGv33hNVQ5AdTcDag"
    
    #️⃣15.7 Apollo Codegen
    4.🚧apollo codegen - 📄https://github.com/apollographql/apollo-tooling  설치
      > npm install -g apollo && npm install apollo 
      > apollo-tooking은 backend에서 🔹mutations, query response, input type🔹을 
        전부 다 'typescript  정의'로 자동으로 생성 해준다
      🔵해석1: "mutation을 보냄🚀(🚧type 자동정의) --- 🛸back-end에서 데이터를 전송한다는 것을 확신 할 수 있다" 
      🔵해석2:  DTO가 모든 것의 시작이라는 점, schema가 front-end를 위한 typescript가 되었다
    
    5.📄https://github.com/apollographql/apollo-tooling#configuration
      🔹[apollo.config.js] 참고❗❗
        
         
       */
/*#️⃣15.7 Apollo Codegen
  1. [apollo codegen] - 📄https://github.com/apollographql/apollo-tooling  설치
      > 🚧npm install -g apollo && npm install apollo 🔴
      > 🚧 npm install -D @graphql-codegen/cli 🔵
           npm install -D @graphql-codegen/typescript-operations @graphql-codegen/typescript 🔵
      
      > apollo-tooling은 backend에서 🔹mutations, query response, input type🔹을 
        전부 다 'typescript  정의'로 자동으로 생성 해준다
      🔵해석1: "mutation을 보냄🚀(🚧type 자동정의) --- 🛸back-end에서 데이터를 전송한다는 것을 확신 할 수 있다" 
      🔵해석2:  DTO가 모든 것의 시작이라는 점, 🔯schema가 front-end를 위한 typescript가 되었다
    
    2.📄https://github.com/apollographql/apollo-tooling#configuration
      📄https://the-guild.dev/graphql/codegen/docs/guides/react-vue  
      🔹includes: "apollo에게 file을 알려줘야 한다  " === 🔹documents
        > apollo가 뭘 할까 ? apollo가 기본적으로 하는 일은 파일을 보면서 🔯gql(태그이름)을 보면
         apollo는 🔯typescript definition을 나에게 준다 
      🔹tagName: 'gql'    === 🔹(API에서 찾아주는 걸로 추정)
     [login.tsx]
     const LOGIN_MUTATION = gql`
      mutation PotatoMutation($email:String!, $password: String!) {
        login(input:{
          email:$email,
          password:$password
        }){
          ok
          error
          token
        }
      }
    `
  3. Apollo 실행 
   > npx Apollo
   > 📄https://github.com/apollographql/apollo-tooling#configuration > ✅apollo client:codegen
   > 🔹사용법:  apollo client:codegen [OUTPUT] [OPTIONS] > npm client:codegen mytypes.d.ts --target=typescript
     🔹[OUTPUT]: mytypes.d.ts
     🔹[OPTIONS]: --target=target > --target=typescript
      🚧npm i -g apollo 🔴Warn: deprecated + 더이상 지원 하지 않음
      🚧https://the-guild.dev/graphql/codegen/docs/guides/react-vue 🔵해결완료
        
  4. 요약: 
       npm install -D @graphql-codegen/cli   
       import { CodegenConfig } from '@graphql-codegen/cli' + [codegen.ts]파일
       npm install -D @graphql-codegen/typescript-operations @graphql-codegen/typescript
       [package.json] : "script":{ "generate": "graphql-codegen" } 
       > npm run generate  
       > ✅Parse Configuration
         ✅Generate outputs

  5. const [loinMutation, {loading, error, data}] = useMutation🔯<LoginMutation, LoginMutationVariables>(LOGIN_MUTATION) 
     🔯loingMutation(): useMutation(🔷mutation login) Hook의 trigger,   
     🔯data: loginMutation의 반환값
     🔯loading: 아직 결과값을 안 받아옴     

   */
/*#️⃣15.8 Login Mutation
  1. output(LoginMutation 아웃풋)에서 'error:false' === 🔹GraphQl에겐 onCompleted라는 뜻 
  2. GraphQL에서의 error는 request가 유효하지 않다 === 인증이 필요, url 오류      
*/
/*#️⃣15.9 Login Mutation part Two
  1. 📄npmjs.com/package/rimraf > npm i rimraf  === 🔹rm -rf: 파일 삭제 + 실행   
 
  2.  🚧Error: ECONNREFUSED 127.0.01:4000
      🔵localChemaFile isn't provided, Apollo tries to fetch a schema from https://localhost:4000/graphql
        > ✅서버를 먼저 켜야 > codegen.ts  > 프론트앤드를 키면 발생하는 에러     

      🚧Failed to load resource: net::ERR_SSL_PROTOCOL_ERROR(오류107)
        원인1 - "SSL 연결 오류", 브라우저가 서버에 대한 보안 연결을 만들 수 없음을 의미
         > 서버 또는 컴퓨터에 안전하게 연결하는 데 필요한 '클라이언트 인증서'가 없는 것이 원인  
        해결1.📄http://1004lucifer.blogspot.com/2018/11/chrome-errsslprotocolerror.html
               서버가 낮은 버전의 프로토콜을 사용하는 경우
              브라우저에서 낮은 버전의 프로토콜을 사용 가능하도록 옵션을 변경해 준다  
        [구글 크롬 ssl 설정]  
        📄https://ko.wukihow.com/wiki/Enable-SSL-3.0
          인터넷 옵션 > 22.10.19 🔴SSL3.0사용 체크 안됨 >> 체크 후 다시 시작 >> 🔴같은 에러
        [다른 브라우저를 사용] 
          크롬 >> 🔴Edge 
        [Cipher Suites]
          🔹TLS(Transport Layer Security): 인증성,기밀성,무결성
          🔹SSL(Secure Sockets Layer):전송 계층 보안, TLS의 표준화 되기 전의 이름 
          🔹socket: 클라이언트와 서버 사이 같은 프로그램 계층끼리 주고받는 소켓 방식 
        [Request URL - https]
        📄https://stackoverflow.com/questions/60548707/neterr-ssl-protocol-error-on-http-post-to-express-server        
          🔴원인은 Request URL: https://localhost:4000/graphql     
          🔵[apollo.ts]
    3. 🔯const [login, {data, loading }] = useMutation
         - useMutation은 반드시 리스트를 반환, 첫 원소는 반드시 호출해 줘야 하는 mutation function   

        */

import {  gql, useMutation } from "@apollo/client";
import React from "react";
import { useForm } from "react-hook-form";
import { FormError } from "../components/form-error";
import {LoginMutationVariables, LoginMutation} from "../__generated__/types";
import logo from "../images/logo.svg";
import { Button } from "../components/button";
import { Link } from "react-router-dom";
import Helmet from "react-helmet";
import { authTokenVar, isLoggedInVar } from "../styles/apollo";
import { LOCALSTORAGE_TOKEN } from "../styles/constant";
import {motion} from "framer-motion";
import styled from "styled-components";
const SVG = styled(motion.svg)`
  color:black;
  background-color:transparent;
  width:200px;
  height:150px;
`

const LOGIN_MUTATION = gql`
  mutation login($loginInput: LoginInput!) {
    login(input: $loginInput){
      ok,
      error,
      token,
    },
  }
`
interface ILoginForm {
  email: string;
  password: string;
  resultError:string;
}   
export const Login = () => {
  const {register,
    getValues,
    formState:{ errors },
    handleSubmit,
    formState
  } = useForm<ILoginForm>({
    mode: "onChange" //📄https://react-hook-form.com/api/useform 제대로 이해해야 로직이 이해가 감 
  });
  const onCompleted = (data: LoginMutation) => {
    const {
      login: { error, ok, token}
    } = data;

    if(ok && token) {
      localStorage.setItem(LOCALSTORAGE_TOKEN, token)
      authTokenVar(token)
      isLoggedInVar(true);
    }
  }
  const [login, {loading, error, data: loginMutationResult, }] = useMutation<
    LoginMutation,
    LoginMutationVariables
  >(LOGIN_MUTATION, {
      onCompleted: onCompleted
   })

  const onValid = () => {
    if(!loading){ 
      const {email, password} = getValues();
      login({
        variables:{
          loginInput:{
            email,
            password,
          }
        }
      })
    }
  }
  //rem: 16px 배수 > 2.5rem = 40px
  return (
    <div className="h-screen flex items-center flex-col mt-10 lg:mt-28"> 
      <Helmet>
        <title>Login | Nuber Eats </title>
      </Helmet>
    <div className=" w-full max-w-screen-sm flex flex-col px-5 items-center">
      
    <SVG xmlns="http://www.w3.org/2000/svg" viewBox="0 0 559 155">
      <path fill="#FEFEFE" opacity="1.000000" stroke="none" d=" M405.000000,156.000000   C270.000031,156.000000 135.500046,156.000000 1.000054,156.000000   C1.000036,104.333366 1.000036,52.666733 1.000018,1.000075   C187.333267,1.000050 373.666534,1.000050 559.999878,1.000025   C559.999878,52.666592 559.999878,104.333183 559.999939,155.999878   C508.500000,156.000000 457.000000,156.000000 405.000000,156.000000  M321.824188,85.499947   C321.824188,94.233910 321.824188,102.967880 321.824188,111.567818   C327.550476,111.567818 332.466431,111.567818 337.930908,111.567818   C337.930908,101.886009 337.930908,92.502457 337.930908,83.065338   C338.988098,83.118309 339.910522,83.121391 339.913025,83.170738   C340.406433,92.979790 340.834808,102.792107 341.269257,112.692673   C346.328003,112.692673 351.376923,112.692673 356.347839,112.692673   C356.347839,88.018173 356.347839,63.662464 356.347839,39.416763   C350.998688,39.416763 346.067932,39.416763 340.824158,39.416763   C340.824158,48.180363 340.896729,56.653492 340.746277,65.122658   C340.723572,66.399940 339.660400,67.658737 339.078522,68.926086   C338.639160,67.689522 337.836304,66.457932 337.819275,65.215576   C337.705902,56.939091 337.760468,48.660305 337.760468,40.289238   C332.164734,40.289238 327.101562,40.289238 321.824188,40.289238   C321.824188,55.224422 321.824188,69.862183 321.824188,85.499947  M370.253479,107.333572   C370.253479,109.110847 370.253479,110.888123 370.253479,112.730484   C392.573425,112.730484 414.319092,112.730484 435.999756,112.730484   C435.999756,109.058884 435.999756,105.662407 435.999756,101.482750   C419.847229,101.482750 403.996460,101.482750 388.145660,101.482750   C388.153809,100.989868 388.161926,100.496986 388.170044,100.004105   C403.843109,100.004105 419.516144,100.004105 435.128510,100.004105   C435.128510,91.371330 435.128510,83.417915 435.128510,75.232933   C413.543915,75.232933 392.141571,75.232933 370.529358,75.232933   C370.529358,78.844437 370.529358,82.236824 370.529358,86.116875   C386.378448,86.116875 401.959290,86.116875 419.157471,86.116875   C417.350433,87.760902 416.762665,88.719246 415.991760,88.901100   C414.728088,89.199196 413.345398,88.998184 412.012909,88.998314   C398.237610,88.999672 384.462280,88.999153 370.253510,88.999153   C370.253510,95.120651 370.253510,100.746506 370.253479,107.333572  M202.586349,83.003304   C209.580460,83.002716 216.577332,83.126953 223.568085,82.973549   C235.327057,82.715508 243.368973,75.303215 244.222305,64.159378   C245.160370,51.909046 238.895782,42.775639 226.855865,41.508698   C216.325424,40.400604 205.521378,40.526348 194.959763,41.469067   C184.615295,42.392403 178.436539,49.710735 177.483505,59.603657   C176.091339,74.055130 185.301025,82.984299 202.586349,83.003304  M479.512878,83.003304   C484.841003,83.002823 490.171448,83.103798 495.496735,82.981140   C507.269623,82.709953 515.333923,75.358017 516.214844,64.234734   C517.186462,51.964500 510.981750,42.808113 498.931366,41.542404   C488.245422,40.420006 477.252380,40.469303 466.564209,41.600842   C455.320953,42.791142 449.216461,51.271580 449.422485,62.509407   C449.622314,73.405411 456.034485,80.949547 467.057129,82.686302   C470.801666,83.276306 474.694580,82.924660 479.512878,83.003304  M300.503296,110.009804   C306.112396,110.009804 311.721466,110.009804 317.495483,110.009804   C317.495483,86.796326 317.495483,64.091652 317.495483,41.286980   C312.832581,41.286980 308.438782,41.286980 303.822632,41.286980   C303.822632,47.720646 303.735291,53.861507 303.857361,59.998203   C303.924133,63.355137 302.414032,63.469406 299.646118,62.405560   C299.646118,55.362339 299.646118,48.424168 299.646118,41.310516   C294.945343,41.310516 290.575409,41.310516 286.276794,41.310516   C286.276794,64.332428 286.276794,87.032608 286.276794,110.009804   C290.897003,110.009804 295.202209,110.009804 300.503296,110.009804  M43.993744,101.504517   C48.164425,105.991089 52.987648,109.265884 59.659706,109.981430   C60.921589,105.102020 62.149551,100.353752 63.354225,95.695549   C52.442986,90.626053 46.319111,72.510727 49.396503,54.962276   C53.255478,54.962276 57.187874,54.962276 61.318668,54.962276   C61.318668,50.166222 61.318668,45.751762 61.318668,41.259605   C47.142124,41.259605 33.230522,41.259605 19.258980,41.259605   C19.258980,45.921410 19.258980,50.310921 19.258980,55.242519   C23.605446,55.242519 27.660364,55.242519 32.533546,55.242519   C31.593864,63.953327 31.111341,72.101021 29.735447,80.094948   C28.485907,87.354759 25.354500,93.725922 17.046688,95.608253   C18.429462,100.704948 19.710150,105.425362 20.992672,110.152534   C29.926851,108.601585 35.603683,103.461800 40.279137,96.630341   C41.550076,98.320442 42.542107,99.639648 43.993744,101.504517  M138.316040,49.521660   C138.316040,46.767159 138.316040,44.012657 138.316040,41.294609   C124.478340,41.294609 111.257759,41.294609 98.152870,41.294609   C98.152870,45.990902 98.152870,50.384239 98.152870,55.111778   C105.731453,55.111778 112.993896,55.111778 120.201347,55.111778   C121.382378,64.620476 118.605850,77.214058 113.911888,85.091972   C110.021095,91.621918 104.174644,95.173035 96.755310,96.480316   C97.467972,101.187881 98.127502,105.544495 98.773018,109.808510   C114.231728,109.774956 126.539871,100.637886 133.192566,84.772133   C137.802902,73.777138 138.643402,62.240582 138.316040,49.521660  M77.485474,39.990585   C74.402733,39.990585 71.319992,39.990585 67.950050,39.990585   C67.950050,50.018452 67.950050,59.288036 67.950050,69.114006   C64.278595,69.114006 60.884537,69.114006 57.449547,69.114006   C57.449547,73.949005 57.449547,78.216545 57.449547,83.035553   C61.026569,83.035553 64.421341,83.035553 68.268143,83.035553   C68.268143,93.313301 68.268143,103.044380 68.268143,112.745552   C74.341293,112.745552 79.932930,112.745552 85.634445,112.745552   C85.634445,88.435883 85.634445,64.390999 85.634445,39.990585   C83.059639,39.990585 80.755356,39.990585 77.485474,39.990585  M476.643463,86.683693   C471.050812,86.683693 465.458130,86.683693 459.635254,86.683693   C459.484406,89.928307 459.349762,92.824318 459.193634,96.181961   C455.474365,96.181961 452.075775,96.181961 448.790497,96.181961   C448.790497,101.064240 448.790497,105.442650 448.790497,109.756607   C471.730499,109.756607 494.292236,109.756607 516.914673,109.756607   C516.914673,105.106682 516.914673,100.713783 516.914673,95.853371   C513.263977,95.853371 509.854095,95.853371 505.962311,95.853371   C505.962311,92.499947 505.962311,89.615494 505.962311,86.739899   C499.853088,86.739899 494.263184,86.739899 488.179810,86.739899   C488.179810,89.899719 488.179810,92.793045 488.179810,95.650177   C484.299683,95.650177 480.928040,95.650177 477.194885,95.650177   C477.194885,92.662041 477.194885,90.012421 476.643463,86.683693  M244.351913,96.062660   C241.077148,96.062660 237.802383,96.062660 234.045929,96.062660   C234.045929,92.579895 234.045929,89.680069 234.045929,86.882446   C227.834686,86.882446 222.135376,86.882446 216.118011,86.882446   C216.118011,90.070610 216.118011,92.836639 216.118011,95.710709   C212.383331,95.710709 208.990829,95.710709 205.123154,95.710709   C205.123154,92.512764 205.123154,89.595131 205.123154,86.753555   C199.052216,86.753555 193.464874,86.753555 187.632523,86.753555   C187.484543,89.920837 187.349487,92.811790 187.192673,96.168175   C183.489258,96.168175 180.089371,96.168175 176.776413,96.168175   C176.776413,101.048782 176.776413,105.430954 176.776413,109.775597   C199.696091,109.775597 222.251648,109.775597 245.072952,109.775597   C245.072952,105.266815 245.072952,100.985405 244.351913,96.062660  M146.957169,44.631393   C146.957169,67.338844 146.957169,90.046295 146.957169,112.743576   C153.193115,112.743576 158.771072,112.743576 164.502106,112.743576   C164.502106,88.450111 164.502106,64.424889 164.502106,39.992825   C159.293488,39.992825 154.327011,39.812885 149.397308,40.158157   C148.506500,40.220547 147.766769,42.439861 146.957169,44.631393  M376.579742,72.006210   C387.980988,72.006210 399.382202,72.006210 410.669495,72.006210   C410.669495,67.624466 410.669495,64.020012 410.669495,59.850872   C402.391266,59.850872 394.339294,59.850872 386.393311,59.850872   C386.393311,57.327400 386.393311,55.390491 386.393311,52.928940   C393.994202,52.928940 401.389740,52.928940 408.701355,52.928940   C408.701355,48.671459 408.701355,44.950859 408.701355,41.327454   C395.151459,41.327454 381.938416,41.327454 368.780701,41.327454   C368.780701,51.711979 368.780701,61.758656 368.780701,72.006210   C371.297119,72.006210 373.453491,72.006210 376.579742,72.006210  M419.618103,40.002819   C418.980103,40.548004 417.791901,41.087086 417.785797,41.639301   C417.674011,51.709644 417.704163,61.781567 417.704163,71.916092   C423.854584,71.916092 429.424469,71.916092 435.391205,71.916092   C435.391205,68.894440 435.391205,66.136177 435.391205,63.221497   C437.888550,63.069599 440.001099,62.941109 442.338318,62.798954   C442.338318,58.568943 442.338318,54.480606 442.338318,50.213596   C440.032745,50.072422 437.922058,49.943176 435.386780,49.787937   C435.386780,46.589031 435.386780,43.508358 435.386780,39.997780   C430.173096,39.997780 425.386292,39.997780 419.618103,40.002819  z"/>
      <path fill="#252629" opacity="1.000000" stroke="none" d=" M321.824188,84.999939   C321.824188,69.862183 321.824188,55.224422 321.824188,40.289238   C327.101562,40.289238 332.164734,40.289238 337.760468,40.289238   C337.760468,48.660305 337.705902,56.939091 337.819275,65.215576   C337.836304,66.457932 338.639160,67.689522 339.078522,68.926086   C339.660400,67.658737 340.723572,66.399940 340.746277,65.122658   C340.896729,56.653492 340.824158,48.180363 340.824158,39.416763   C346.067932,39.416763 350.998688,39.416763 356.347839,39.416763   C356.347839,63.662464 356.347839,88.018173 356.347839,112.692673   C351.376923,112.692673 346.328003,112.692673 341.269257,112.692673   C340.834808,102.792107 340.406433,92.979790 339.913025,83.170738   C339.910522,83.121391 338.988098,83.118309 337.930908,83.065338   C337.930908,92.502457 337.930908,101.886009 337.930908,111.567818   C332.466431,111.567818 327.550476,111.567818 321.824188,111.567818   C321.824188,102.967880 321.824188,94.233910 321.824188,84.999939  z"/>
      <path fill="#212225" opacity="1.000000" stroke="none" d=" M370.253479,106.852966   C370.253510,100.746506 370.253510,95.120651 370.253510,88.999153   C384.462280,88.999153 398.237610,88.999672 412.012909,88.998314   C413.345398,88.998184 414.728088,89.199196 415.991760,88.901100   C416.762665,88.719246 417.350433,87.760902 419.157471,86.116875   C401.959290,86.116875 386.378448,86.116875 370.529358,86.116875   C370.529358,82.236824 370.529358,78.844437 370.529358,75.232933   C392.141571,75.232933 413.543915,75.232933 435.128510,75.232933   C435.128510,83.417915 435.128510,91.371330 435.128510,100.004105   C419.516144,100.004105 403.843109,100.004105 388.170044,100.004105   C388.161926,100.496986 388.153809,100.989868 388.145660,101.482750   C403.996460,101.482750 419.847229,101.482750 435.999756,101.482750   C435.999756,105.662407 435.999756,109.058884 435.999756,112.730484   C414.319092,112.730484 392.573425,112.730484 370.253479,112.730484   C370.253479,110.888123 370.253479,109.110847 370.253479,106.852966  z"/>
      <path fill="#222326" opacity="1.000000" stroke="none" d=" M202.102295,83.003304   C185.301025,82.984299 176.091339,74.055130 177.483505,59.603657   C178.436539,49.710735 184.615295,42.392403 194.959763,41.469067   C205.521378,40.526348 216.325424,40.400604 226.855865,41.508698   C238.895782,42.775639 245.160370,51.909046 244.222305,64.159378   C243.368973,75.303215 235.327057,82.715508 223.568085,82.973549   C216.577332,83.126953 209.580460,83.002716 202.102295,83.003304  M198.691238,56.685432   C195.423203,58.488476 193.985931,61.638523 195.741333,64.584442   C196.985794,66.672935 200.119400,68.531372 202.597412,68.807274   C208.173813,69.428162 213.867996,69.071953 219.512039,68.978867   C223.922104,68.906128 226.880051,66.233620 226.587921,62.409504   C226.281967,58.404247 224.074890,55.979004 219.819504,56.009583   C213.018845,56.058441 206.218674,56.174232 198.691238,56.685432  z"/>
      <path fill="#222326" opacity="1.000000" stroke="none" d=" M479.016296,83.003304   C474.694580,82.924660 470.801666,83.276306 467.057129,82.686302   C456.034485,80.949547 449.622314,73.405411 449.422485,62.509407   C449.216461,51.271580 455.320953,42.791142 466.564209,41.600842   C477.252380,40.469303 488.245422,40.420006 498.931366,41.542404   C510.981750,42.808113 517.186462,51.964500 516.214844,64.234734   C515.333923,75.358017 507.269623,82.709953 495.496735,82.981140   C490.171448,83.103798 484.841003,83.002823 479.016296,83.003304  M467.868134,65.516708   C470.065155,66.678444 472.192352,68.644920 474.472961,68.842743   C480.080292,69.329147 485.759125,69.065437 491.407379,68.981308   C495.862152,68.914963 498.652466,66.329895 498.653351,62.501511   C498.654236,58.673031 495.863739,56.087288 491.410431,56.018517   C485.928375,55.933857 480.443604,55.955387 474.960815,56.008762   C468.871094,56.068039 466.873444,58.479694 467.868134,65.516708  z"/>
      <path fill="#252629" opacity="1.000000" stroke="none" d=" M300.005371,110.009804   C295.202209,110.009804 290.897003,110.009804 286.276794,110.009804   C286.276794,87.032608 286.276794,64.332428 286.276794,41.310516   C290.575409,41.310516 294.945343,41.310516 299.646118,41.310516   C299.646118,48.424168 299.646118,55.362339 299.646118,62.405560   C302.414032,63.469406 303.924133,63.355137 303.857361,59.998203   C303.735291,53.861507 303.822632,47.720646 303.822632,41.286980   C308.438782,41.286980 312.832581,41.286980 317.495483,41.286980   C317.495483,64.091652 317.495483,86.796326 317.495483,110.009804   C311.721466,110.009804 306.112396,110.009804 300.005371,110.009804  M299.706909,88.471146   C299.706909,91.241974 299.706909,94.012802 299.706909,96.783630   C300.272339,97.031662 300.837738,97.279686 301.403168,97.527718   C302.224670,96.354614 303.689484,95.216324 303.755188,94.002304   C304.024628,89.024712 303.762054,84.021011 303.905060,79.032936   C303.999725,75.731651 302.502350,75.503242 299.706879,76.501060   C299.706879,80.209282 299.706879,83.846619 299.706909,88.471146  z"/>
      <path fill="#242528" opacity="1.000000" stroke="none" d=" M43.763939,101.231689   C42.542107,99.639648 41.550076,98.320442 40.279137,96.630341   C35.603683,103.461800 29.926851,108.601585 20.992672,110.152534   C19.710150,105.425362 18.429462,100.704948 17.046688,95.608253   C25.354500,93.725922 28.485907,87.354759 29.735447,80.094948   C31.111341,72.101021 31.593864,63.953327 32.533546,55.242519   C27.660364,55.242519 23.605446,55.242519 19.258980,55.242519   C19.258980,50.310921 19.258980,45.921410 19.258980,41.259605   C33.230522,41.259605 47.142124,41.259605 61.318668,41.259605   C61.318668,45.751762 61.318668,50.166222 61.318668,54.962276   C57.187874,54.962276 53.255478,54.962276 49.396503,54.962276   C46.319111,72.510727 52.442986,90.626053 63.354225,95.695549   C62.149551,100.353752 60.921589,105.102020 59.659706,109.981430   C52.987648,109.265884 48.164425,105.991089 43.763939,101.231689  z"/>
      <path fill="#232427" opacity="1.000000" stroke="none" d=" M138.316071,50.020111   C138.643402,62.240582 137.802902,73.777138 133.192566,84.772133   C126.539871,100.637886 114.231728,109.774956 98.773018,109.808510   C98.127502,105.544495 97.467972,101.187881 96.755310,96.480316   C104.174644,95.173035 110.021095,91.621918 113.911888,85.091972   C118.605850,77.214058 121.382378,64.620476 120.201347,55.111778   C112.993896,55.111778 105.731453,55.111778 98.152870,55.111778   C98.152870,50.384239 98.152870,45.990902 98.152870,41.294609   C111.257759,41.294609 124.478340,41.294609 138.316040,41.294609   C138.316040,44.012657 138.316040,46.767159 138.316071,50.020111  z"/>
      <path fill="#252629" opacity="1.000000" stroke="none" d=" M77.968269,39.990585   C80.755356,39.990585 83.059639,39.990585 85.634445,39.990585   C85.634445,64.390999 85.634445,88.435883 85.634445,112.745552   C79.932930,112.745552 74.341293,112.745552 68.268143,112.745552   C68.268143,103.044380 68.268143,93.313301 68.268143,83.035553   C64.421341,83.035553 61.026569,83.035553 57.449547,83.035553   C57.449547,78.216545 57.449547,73.949005 57.449547,69.114006   C60.884537,69.114006 64.278595,69.114006 67.950050,69.114006   C67.950050,59.288036 67.950050,50.018452 67.950050,39.990585   C71.319992,39.990585 74.402733,39.990585 77.968269,39.990585  z"/>
      <path fill="#252629" opacity="1.000000" stroke="none" d=" M476.919189,87.023254   C477.194885,90.012421 477.194885,92.662041 477.194885,95.650177   C480.928040,95.650177 484.299683,95.650177 488.179810,95.650177   C488.179810,92.793045 488.179810,89.899719 488.179810,86.739899   C494.263184,86.739899 499.853088,86.739899 505.962311,86.739899   C505.962311,89.615494 505.962311,92.499947 505.962311,95.853371   C509.854095,95.853371 513.263977,95.853371 516.914673,95.853371   C516.914673,100.713783 516.914673,105.106682 516.914673,109.756607   C494.292236,109.756607 471.730499,109.756607 448.790497,109.756607   C448.790497,105.442650 448.790497,101.064240 448.790497,96.181961   C452.075775,96.181961 455.474365,96.181961 459.193634,96.181961   C459.349762,92.824318 459.484406,89.928307 459.635254,86.683693   C465.458130,86.683693 471.050812,86.683693 476.919189,87.023254  z"/>
      <path fill="#252629" opacity="1.000000" stroke="none" d=" M244.712433,96.383331   C245.072952,100.985405 245.072952,105.266815 245.072952,109.775597   C222.251648,109.775597 199.696091,109.775597 176.776413,109.775597   C176.776413,105.430954 176.776413,101.048782 176.776413,96.168175   C180.089371,96.168175 183.489258,96.168175 187.192673,96.168175   C187.349487,92.811790 187.484543,89.920837 187.632523,86.753555   C193.464874,86.753555 199.052216,86.753555 205.123154,86.753555   C205.123154,89.595131 205.123154,92.512764 205.123154,95.710709   C208.990829,95.710709 212.383331,95.710709 216.118011,95.710709   C216.118011,92.836639 216.118011,90.070610 216.118011,86.882446   C222.135376,86.882446 227.834686,86.882446 234.045929,86.882446   C234.045929,89.680069 234.045929,92.579895 234.045929,96.062660   C237.802383,96.062660 241.077148,96.062660 244.712433,96.383331  z"/>
      <path fill="#26272A" opacity="1.000000" stroke="none" d=" M146.957230,44.147385   C147.766769,42.439861 148.506500,40.220547 149.397308,40.158157   C154.327011,39.812885 159.293488,39.992825 164.502106,39.992825   C164.502106,64.424889 164.502106,88.450111 164.502106,112.743576   C158.771072,112.743576 153.193115,112.743576 146.957169,112.743576   C146.957169,90.046295 146.957169,67.338844 146.957230,44.147385  z"/>
      <path fill="#242528" opacity="1.000000" stroke="none" d=" M376.094788,72.006210   C373.453491,72.006210 371.297119,72.006210 368.780701,72.006210   C368.780701,61.758656 368.780701,51.711979 368.780701,41.327454   C381.938416,41.327454 395.151459,41.327454 408.701355,41.327454   C408.701355,44.950859 408.701355,48.671459 408.701355,52.928940   C401.389740,52.928940 393.994202,52.928940 386.393311,52.928940   C386.393311,55.390491 386.393311,57.327400 386.393311,59.850872   C394.339294,59.850872 402.391266,59.850872 410.669495,59.850872   C410.669495,64.020012 410.669495,67.624466 410.669495,72.006210   C399.382202,72.006210 387.980988,72.006210 376.094788,72.006210  z"/>
      <path fill="#222326" opacity="1.000000" stroke="none" d=" M420.108795,40.000298   C425.386292,39.997780 430.173096,39.997780 435.386780,39.997780   C435.386780,43.508358 435.386780,46.589031 435.386780,49.787937   C437.922058,49.943176 440.032745,50.072422 442.338318,50.213596   C442.338318,54.480606 442.338318,58.568943 442.338318,62.798954   C440.001099,62.941109 437.888550,63.069599 435.391205,63.221497   C435.391205,66.136177 435.391205,68.894440 435.391205,71.916092   C429.424469,71.916092 423.854584,71.916092 417.704163,71.916092   C417.704163,61.781567 417.674011,51.709644 417.785797,41.639301   C417.791901,41.087086 418.980103,40.548004 420.108795,40.000298  z"/>
      <path fill="#FBFBFC" opacity="1.000000" stroke="none" d=" M199.054764,56.473579   C206.218674,56.174232 213.018845,56.058441 219.819504,56.009583   C224.074890,55.979004 226.281967,58.404247 226.587921,62.409504   C226.880051,66.233620 223.922104,68.906128 219.512039,68.978867   C213.867996,69.071953 208.173813,69.428162 202.597412,68.807274   C200.119400,68.531372 196.985794,66.672935 195.741333,64.584442   C193.985931,61.638523 195.423203,58.488476 199.054764,56.473579  z"/>
      <path fill="#FBFBFC" opacity="1.000000" stroke="none" d=" M467.711639,65.155746   C466.873444,58.479694 468.871094,56.068039 474.960815,56.008762   C480.443604,55.955387 485.928375,55.933857 491.410431,56.018517   C495.863739,56.087288 498.654236,58.673031 498.653351,62.501511   C498.652466,66.329895 495.862152,68.914963 491.407379,68.981308   C485.759125,69.065437 480.080292,69.329147 474.472961,68.842743   C472.192352,68.644920 470.065155,66.678444 467.711639,65.155746  z"/>
      <path fill="#EFEFEF" opacity="1.000000" stroke="none" d=" M299.706909,87.977554   C299.706879,83.846619 299.706879,80.209282 299.706879,76.501060   C302.502350,75.503242 303.999725,75.731651 303.905060,79.032936   C303.762054,84.021011 304.024628,89.024712 303.755188,94.002304   C303.689484,95.216324 302.224670,96.354614 301.403168,97.527718   C300.837738,97.279686 300.272339,97.031662 299.706909,96.783630   C299.706909,94.012802 299.706909,91.241974 299.706909,87.977554  z"/>
    </SVG>
      <h4 className="w-full font-medium text-left text-3xl mb-5">
        Welcom back
      </h4>
      <form 
        className="grid gap-2 mt-5 w-full mb-3 " 
        onSubmit={handleSubmit(onValid)}
      > 
        <input
          {...register("email", {
            required: "Email is required",
            pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/ 
          })}
           placeholder="Email"
           className="input mb-3 "
           type="email"

        />
        {errors.email?.message && (
          <FormError errorMessage={errors.email.message}/>
        )}
        {errors.email?.type === "pattern" && (
          <FormError errorMessage={"Please enter a valid email"}/>
        )}
        <input
          {...register("password", {required: "Password is required"})} 
          type="password"
          placeholder="Password" 
          className="input"
        />
        {errors.password?.message && (
          <FormError errorMessage={errors.password.message}/>
        )}
        {errors.password?.type === "minLength" && (
          <FormError errorMessage="Password must be more than 10 chars."/>
        )}
        <Button 
          canClick={formState.isValid}
          loading={loading}
          actionText={"Log in"}
        />
        {loginMutationResult?.login.error && (
          <FormError errorMessage={loginMutationResult.login.error} />
        )}
      </form>
      <div>
        New to Nuber?{" "}
        <Link to="/create-account" className=" text-lime-600 hover:underline"> Create an Account</Link>
      </div>
    </div>        
  </div>
  )
}